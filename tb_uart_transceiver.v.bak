`timescale 1ns / 1ps

module tb_uart_transceiver;

    reg clk = 0;
    reg rst = 1;
    reg tx_start = 0;
    reg [7:0] tx_data = 0;
    wire tx;
    wire tx_busy;

    wire rx = tx;  // loopback
    wire [7:0] rx_data;
    wire rx_valid;

    // Parameters
    parameter CLK_FREQ = 50000000;     // 50 MHz
    parameter BAUD_RATE = 115200;
    localparam integer CLKS_PER_BIT = CLK_FREQ / BAUD_RATE;
    localparam real BIT_PERIOD_NS = 1e9 / BAUD_RATE;

    // Instantiate DUT (UART transceiver)
    uart_transceiver uut (
        .clk(clk),
        .rst(rst),
        .tx_start(tx_start),
        .tx_data(tx_data),
        .tx(tx),
        .tx_busy(tx_busy),
        .rx(rx),
        .rx_data(rx_data),
        .rx_valid(rx_valid)
    );

    // 50 MHz clock
    always #10 clk = ~clk;

    // Send a UART byte via TX
    task send_uart(input [7:0] byte);
        begin
            @(negedge clk);
            tx_data <= byte;
            tx_start <= 1;
            @(negedge clk);
            tx_start <= 0;
        end
    endtask

    initial begin
        $display("UART Transceiver Testbench Start @115200 baud");
        $dumpfile("tb_uart_transceiver.vcd");
        $dumpvars(0, tb_uart_transceiver);

        // Release reset
        #100 rst = 0;
        #100;

        // Send byte 0xA5
        send_uart(8'hA5);

        // Wait enough time for 10 bits @115200 (~87 µs) + margin
        #(10 * BIT_PERIOD_NS + 5000);

        if (rx_valid && rx_data == 8'hA5)
            $display("✅ Transceived data match: %h", rx_data);
        else
            $display("❌ Data mismatch or not received. Got: %h", rx_data);

        #1000 $finish;
    end

endmodule
